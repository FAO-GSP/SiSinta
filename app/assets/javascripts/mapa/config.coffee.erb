# Configura el path base para evitar que leaflet intente calcular la url de
# las imágenes, porque no entiende los helpers de sass.
L.Icon.Default.imagePath = '/assets/'
# Configura las imágenes de los íconos con digests, sacando el path base de
# las url de las imágenes, para que no quede duplicado.
L.Icon.Default.mergeOptions({
  iconUrl: "<%= image_path('leaflet/dist/images/marker-icon.png').sub('/assets/', '') %>"
  iconRetinaUrl: "<%= image_path('leaflet/dist/images/marker-icon-2x.png').sub('/assets/', '') %>"
  shadowUrl: "<%= image_path('leaflet/dist/images/marker-shadow.png').sub('/assets/', '') %>"
})

# Cuadro de información con título y texto
L.Control.Info = L.Control.extend({
  options:
    position: 'topleft'

  onAdd: (map) ->
    wrapper = L.DomUtil.create('div', 'info')
    title = L.DomUtil.create('h6', 'col title', wrapper)
    text = L.DomUtil.create('p', 'col text', wrapper)

    title.innerHTML = this.options.title
    text.innerHTML = this.options.text

    return wrapper

  onRemove: (map) ->
    # Nada que hacer
})

# Factory function named after the class of the control plugin to allow chaining
L.control.info = (opts) ->
  return new L.Control.Info(opts)

# exports
# https://robots.thoughtbot.com/module-pattern-in-javascript-and-coffeescript
window.Mapa = {}

# Generates a popup box for each feature
Mapa.prepare_popup = (feature, layer) ->
  serie = if feature.properties.serie
    "<a target='_blank' title='Serie' href='#{feature.properties.serie.url}'>#{
      feature.properties.serie.nombre || 'Serie'}</a> - "
  else
    ''

  layer.bindPopup(
    serie + "<a target='_blank' title='Perfil' href='#{feature.properties.url}'>#{
      feature.properties.numero || 'Perfil'}</a>"
  )
